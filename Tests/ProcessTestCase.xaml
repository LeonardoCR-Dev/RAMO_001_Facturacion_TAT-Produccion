<Activity mc:Ignorable="sap sap2010" x:Class="ProcessTestCase" VisualBasic.Settings="{x:Null}" sap:VirtualizedContainerService.HintSize="1062,1803" sap2010:WorkflowViewState.IdRef="REFTestCase_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:uta="clr-namespace:UiPath.Testing.Activities;assembly=UiPath.Testing.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="44">
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Testing</x:String>
      <x:String>UiPath.Testing.Activities</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>UiPath.Core.Activities.Orchestrator</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="104">
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Testing</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.CodeDom</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Forms</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Verify if the Process workflow works as expected.&#xA;The verification should check whether the output of the Process workflow is the expected one." DisplayName="ProcessTestCase" sap:VirtualizedContainerService.HintSize="976,2264" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="scg:Dictionary(x:String, x:Object)" Name="Config" />
      <Variable x:TypeArguments="ui:QueueItem" Name="TransactionItem" />
      <Variable x:TypeArguments="x:Int32" Default="1" Name="TransactionNumber" />
      <Variable x:TypeArguments="x:String" Name="EjecucionesActuales" />
      <Variable x:TypeArguments="s:String[]" Name="ArregloEjecuciones" />
      <Variable x:TypeArguments="x:String" Name="Agencia" />
      <Variable x:TypeArguments="x:Boolean" Name="EstaEjecutandose" />
      <Variable x:TypeArguments="x:String" Name="ActualizacionEjecuciones" />
      <Variable x:TypeArguments="x:Boolean" Name="bool_Bandera" />
      <Variable x:TypeArguments="x:String" Name="str_AssetActualizado" />
      <Variable x:TypeArguments="ui:QueueItem" Name="Queue" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="484,57" sap2010:WorkflowViewState.IdRef="CommentOut_4">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="416,673" sap2010:WorkflowViewState.IdRef="Sequence_22">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:GetQueueItem ContinueOnError="{x:Null}" TimeoutMS="{x:Null}" DisplayName="Get Transaction Item" FolderPath="Facturacion_TAT" sap:VirtualizedContainerService.HintSize="382,175" sap2010:WorkflowViewState.IdRef="GetQueueItem_1" QueueType="FacturacionTAT" TransactionItem="[Queue]" />
          <ui:SetTransactionStatus ContinueOnError="{x:Null}" Reason="{x:Null}" ServiceBaseAddress="{x:Null}" TimeoutMS="{x:Null}" DisplayName="Set Transaction Status" ErrorType="Business" FolderPath="Facturacion_TAT" sap:VirtualizedContainerService.HintSize="382,223" sap2010:WorkflowViewState.IdRef="SetTransactionStatus_4" Status="Successful" TransactionItem="[Queue]">
            <ui:SetTransactionStatus.Analytics>
              <scg:Dictionary x:TypeArguments="x:String, InArgument" />
            </ui:SetTransactionStatus.Analytics>
            <ui:SetTransactionStatus.Output>
              <scg:Dictionary x:TypeArguments="x:String, InArgument" />
            </ui:SetTransactionStatus.Output>
          </ui:SetTransactionStatus>
          <ui:PostponeTransactionItem ContinueOnError="{x:Null}" TimeoutMS="{x:Null}" DeferDate="[Now.AddMinutes(2)]" DisplayName="Postpone Transaction Item" FolderPath="Facturacion_TAT" sap:VirtualizedContainerService.HintSize="382,215" sap2010:WorkflowViewState.IdRef="PostponeTransactionItem_1" TransactionItem="[Queue]" />
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <Assign sap:VirtualizedContainerService.HintSize="484,114" sap2010:WorkflowViewState.IdRef="Assign_5">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[Agencia]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">1910</InArgument>
      </Assign.Value>
    </Assign>
    <ui:GetRobotAsset TimeoutMS="{x:Null}" AssetName="Agencias En Ejecucion" CacheStrategy="None" DisplayName="Get Asset" FolderPath="Facturacion_TAT" sap:VirtualizedContainerService.HintSize="484,175" sap2010:WorkflowViewState.IdRef="GetRobotAsset_1">
      <ui:GetRobotAsset.Value>
        <OutArgument x:TypeArguments="x:String">[EjecucionesActuales]</OutArgument>
      </ui:GetRobotAsset.Value>
    </ui:GetRobotAsset>
    <Sequence DisplayName="Eliminar Agencia Del Registro" sap:VirtualizedContainerService.HintSize="484,506" sap2010:WorkflowViewState.IdRef="Sequence_19">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:InvokeCode ContinueOnError="{x:Null}" Code="    ' Texto original con los números de agencia&#xD;&#xA;    Dim texto As String = Asset&#xD;&#xA;    ' Número de agencia que queremos eliminar&#xD;&#xA;    Dim agencia As String = str_Agencia&#xD;&#xA;&#xD;&#xA;    ' Validar si el texto está vacío&#xD;&#xA;    If String.IsNullOrWhiteSpace(texto) Then&#xD;&#xA;        ' Si el texto está vacío, no hay nada que eliminar&#xD;&#xA;        Console.WriteLine(&quot;Texto vacío, nada que eliminar.&quot;)&#xD;&#xA;    Else&#xD;&#xA;        ' Limpieza inicial del texto para eliminar separadores duplicados&#xD;&#xA;        texto = texto.Replace(&quot;||&quot;, &quot;|&quot;).Trim(&quot;|&quot;c)&#xD;&#xA;&#xD;&#xA;        ' Separar el texto en una lista de agencias&#xD;&#xA;        Dim agencias As List(Of String) = texto.Split(&quot;|&quot;c).Where(Function(x) Not String.IsNullOrWhiteSpace(x)).ToList()&#xD;&#xA;&#xD;&#xA;        ' Eliminar la agencia si está en la lista&#xD;&#xA;        If agencias.Contains(agencia) Then&#xD;&#xA;            agencias.Remove(agencia)&#xD;&#xA;            ' Actualizar el texto con las agencias restantes&#xD;&#xA;            texto = String.Join(&quot;|&quot;, agencias)&#xD;&#xA;        End If&#xD;&#xA;    End If&#xD;&#xA;assetActualizado=texto&#xD;&#xA;    ' Mostrar el texto actualizado&#xD;&#xA;    Console.WriteLine(&quot;Texto actualizado: &quot; &amp; texto)" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="416,197" sap2010:WorkflowViewState.IdRef="InvokeCode_2">
        <ui:InvokeCode.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="Asset">
            <VisualBasicValue x:TypeArguments="x:String" ExpressionText="EjecucionesActuales" />
          </InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="str_Agencia">
            <VisualBasicValue x:TypeArguments="x:String" ExpressionText="Agencia" />
          </InArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="assetActualizado">
            <VisualBasicReference x:TypeArguments="x:String" ExpressionText="str_AssetActualizado" />
          </OutArgument>
        </ui:InvokeCode.Arguments>
      </ui:InvokeCode>
      <ui:SetAsset TimeoutMS="{x:Null}" AssetName="Agencias En Ejecucion" DisplayName="Set Asset" FolderPath="Facturacion_TAT" sap:VirtualizedContainerService.HintSize="416,217" sap2010:WorkflowViewState.IdRef="SetAsset_3" Value="[str_AssetActualizado]" />
    </Sequence>
    <Sequence DisplayName="Agregar agencia a registro" sap:VirtualizedContainerService.HintSize="484,1012" sap2010:WorkflowViewState.IdRef="Sequence_18">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:InvokeCode ContinueOnError="{x:Null}" Code="    Dim texto As String = str_Asset&#xD;&#xA;    ' Número de agencia que queremos buscar&#xD;&#xA;    Dim agencia As String = str_Agencia&#xD;&#xA;    ' Variable para almacenar si la agencia fue encontrada&#xD;&#xA;    Dim Bandera As Boolean = False&#xD;&#xA;&#xD;&#xA;    ' Validar si el texto está vacío&#xD;&#xA;    If String.IsNullOrWhiteSpace(texto) Then&#xD;&#xA;        ' Si el texto está vacío, inicializarlo con la agencia buscada&#xD;&#xA;        texto = agencia&#xD;&#xA;        bool_Bandera = False&#xD;&#xA;    Else&#xD;&#xA;        ' Limpieza inicial del texto para eliminar separadores duplicados&#xD;&#xA;        texto = texto.Replace(&quot;||&quot;, &quot;|&quot;).Trim(&quot;|&quot;c)&#xD;&#xA;&#xD;&#xA;        ' Separar el texto en una lista de agencias&#xD;&#xA;        Dim agencias As List(Of String) = texto.Split(&quot;|&quot;c).Where(Function(x) Not String.IsNullOrWhiteSpace(x)).ToList()&#xD;&#xA;&#xD;&#xA;        ' Verificar si la agencia ya está en la lista&#xD;&#xA;        If agencias.Contains(agencia) Then&#xD;&#xA;            ' Si la agencia ya está, marcar como encontrada&#xD;&#xA;            bool_Bandera = True&#xD;&#xA;        Else&#xD;&#xA;            ' Si la agencia no está, agregarla al texto&#xD;&#xA;            agencias.Add(agencia)&#xD;&#xA;            texto = String.Join(&quot;|&quot;, agencias)&#xD;&#xA;            bool_Bandera = False&#xD;&#xA;        End If&#xD;&#xA;    End If&#xD;&#xA;&#xD;&#xA;    ' Mostrar los resultados&#xD;&#xA;&#x9;str_AssetActualizado=texto&#xD;&#xA;    Console.WriteLine(&quot;Texto actualizado: &quot; &amp; texto)&#xD;&#xA;    Console.WriteLine(&quot;Agencia encontrada: &quot; &amp; bool_Bandera)" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="450,197" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
        <ui:InvokeCode.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="str_Asset">
            <VisualBasicValue x:TypeArguments="x:String" ExpressionText="EjecucionesActuales" />
          </InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="str_Agencia">
            <VisualBasicValue x:TypeArguments="x:String" ExpressionText="Agencia" />
          </InArgument>
          <OutArgument x:TypeArguments="x:Boolean" x:Key="bool_Bandera">
            <VisualBasicReference x:TypeArguments="x:Boolean" ExpressionText="bool_Bandera" />
          </OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="str_AssetActualizado">
            <VisualBasicReference x:TypeArguments="x:String" ExpressionText="str_AssetActualizado" />
          </OutArgument>
        </ui:InvokeCode.Arguments>
      </ui:InvokeCode>
      <If Condition="[bool_Bandera]" DisplayName="Si se esta ejecutando la agencia" sap:VirtualizedContainerService.HintSize="450,723" sap2010:WorkflowViewState.IdRef="If_5">
        <If.Then>
          <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="416,168" sap2010:WorkflowViewState.IdRef="Sequence_16">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:MessageBox Caption="{x:Null}" ChosenButton="{x:Null}" AutoCloseAfter="00:00:00" DisplayName="Message Box" sap:VirtualizedContainerService.HintSize="382,108" sap2010:WorkflowViewState.IdRef="MessageBox_1" Text="[&quot;Ya se esta ejecutando la agencia &quot;+Agencia]" />
          </Sequence>
        </If.Then>
        <If.Else>
          <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,394" sap2010:WorkflowViewState.IdRef="Sequence_17">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:MessageBox Caption="{x:Null}" ChosenButton="{x:Null}" AutoCloseAfter="00:00:00" DisplayName="Message Box" sap:VirtualizedContainerService.HintSize="382,117" sap2010:WorkflowViewState.IdRef="MessageBox_2" Text="[&quot;No se esta ejecutando la agencia &quot;+Agencia+&quot; se agrrega al asset&quot;]" />
            <ui:SetAsset TimeoutMS="{x:Null}" AssetName="Agencias En Ejecucion" DisplayName="Set Asset" FolderPath="Facturacion_TAT" sap:VirtualizedContainerService.HintSize="382,217" sap2010:WorkflowViewState.IdRef="SetAsset_2" Value="[str_AssetActualizado]" />
          </Sequence>
        </If.Else>
      </If>
    </Sequence>
    <ui:LogMessage DisplayName="Log Message - ProcessTestCase" sap:VirtualizedContainerService.HintSize="484,173" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;ProcessTestCase started.&quot;]">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:LogMessage>
    <Sequence DisplayName="... Given" sap:VirtualizedContainerService.HintSize="484,57" sap2010:WorkflowViewState.IdRef="Sequence_2">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke InitAllSettings workflow" sap:VirtualizedContainerService.HintSize="434,177" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\InitAllSettings.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFile">Data\Config.xlsx</InArgument>
          <InArgument x:TypeArguments="s:String[]" x:Key="in_ConfigSheets">[{"Settings","Constants"}]</InArgument>
          <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="out_Config">[Config]</OutArgument>
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke InitAllApplications workflow" sap:VirtualizedContainerService.HintSize="434,177" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_3" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\InitAllApplications.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
      <Assign DisplayName="Assign TransactionNumber" sap:VirtualizedContainerService.HintSize="434,114" sap2010:WorkflowViewState.IdRef="Assign_2">
        <Assign.To>
          <OutArgument x:TypeArguments="x:Int32">[TransactionNumber]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:Int32">1</InArgument>
        </Assign.Value>
      </Assign>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke GetTransactionData workflow" sap:VirtualizedContainerService.HintSize="434,224" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\GetTransactionData.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:Int32" x:Key="in_TransactionNumber" />
          <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
          <OutArgument x:TypeArguments="ui:QueueItem" x:Key="out_TransactionItem">[TransactionItem]</OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="out_TransactionField1" />
          <OutArgument x:TypeArguments="x:String" x:Key="out_TransactionField2" />
          <OutArgument x:TypeArguments="x:String" x:Key="out_TransactionID" />
          <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dt_TransactionData" />
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
    </Sequence>
    <Sequence DisplayName="... When" sap:VirtualizedContainerService.HintSize="484,57" sap2010:WorkflowViewState.IdRef="Sequence_3">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Process workflow" sap:VirtualizedContainerService.HintSize="416,168" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\ProcessOriginal.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">[TransactionItem]</InArgument>
          <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
    </Sequence>
    <Sequence DisplayName="... Then" sap:VirtualizedContainerService.HintSize="484,48" sap2010:WorkflowViewState.IdRef="Sequence_4">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:CommentOut DisplayName="Enable and change as needed" sap:VirtualizedContainerService.HintSize="613,385" sap2010:WorkflowViewState.IdRef="CommentOut_1">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="416,274" sap2010:WorkflowViewState.IdRef="Sequence_5">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <uta:VerifyExpressionWithOperator AlternativeVerificationTitle="{x:Null}" FirstExpression="{x:Null}" KeepScreenshots="{x:Null}" OutputMessageFormat="{x:Null}" Result="{x:Null}" ScreenshotsPath="{x:Null}" SecondExpression="{x:Null}" ContinueOnFailure="True" DisplayName="Verify process output" sap:VirtualizedContainerService.HintSize="382,214" sap2010:WorkflowViewState.IdRef="VerifyExpressionWithOperator_1" Operator="Equality" TakeScreenshotInCaseOfFailingAssertion="False" TakeScreenshotInCaseOfSucceedingAssertion="False" />
          </Sequence>
        </ui:CommentOut.Body>
      </ui:CommentOut>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke CloseAllApplications workflow" sap:VirtualizedContainerService.HintSize="612.666666666667,114" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\CloseAllApplications.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <scg:Dictionary x:TypeArguments="x:String, Argument" />
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
    </Sequence>
  </Sequence>
</Activity>